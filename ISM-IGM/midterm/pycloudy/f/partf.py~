# -*- coding: utf-8 -*-
# <nbformat>3.0</nbformat>

# <codecell>

import numpy as np
import matplotlib.pyplot as plt
import os
# <codecell>

import pyCloudy as pc

#
fsize = 7
m_var = 0.01 # 0.1 0.01
metal_parameter = 'metals 0.3 linear'


# <codecell>

# Define verbosity to high level (will print errors, warnings and messages)
pc.log_.level = 3

# <codecell>

# The directory in which we will have the model
# You may want to change this to a different place so that the current directory
# will not receive all the Cloudy files.
dir_ = './model/'
fig_dir = './' + str(m_var) + "/"

if not os.path.isdir(fig_dir): os.mkdir(fig_dir)
if not os.path.isdir(dir_): os.mkdir(dir_)
# <codecell>

# Define some parameters of the model:
model_name = 'midterm_v1'
full_model_name = '{0}{1}'.format(dir_, model_name)
# Density of cloud (uniform density)
dens = 3. #log cm-3
# Effective blackbody temperature of Central Star
Teff = 37130. #K
# Rate of production of Hydrogen ionizing photons
qH = 49.23 #s-1
# Inner radius
r_min = 5e16 #cm
# Outer radius (if needed)
#r_max = 2e18 #cm
dist = 1.26 #kpc

# <codecell>

# these are the commands common to all the models (here only one ...)
options = ('no molecules',
            'no level2 lines',
            'no fine opacities',
            'atom h-like levels small',
            'atom he-like levels small',
            'COSMIC RAY BACKGROUND',
            'element limit off -8',
            'print line optical depth', 
            metal_parameter
            )

# <codecell>

emis_tab = ['H  1  4861',
            'H  1  6563',
            'He 1  5876',
            'O  1  6300',
            'O II  3726',
            'O II  3729',
            'S II  6731',
            'S II  6716',
            'O  3  5007', 
            'O  3  4959',
            'O  3  4931',
            'N  2  6584',
            'N  2  6548',
            'N  2  5755',
            'TOTL  4363',
            'TOTL  4861',
            'O  1 63.17m',
            'O  1 145.5m',
            'C  2 157.6m']

print len(emis_tab)

# <codecell>

abund = {'He' : -0.92, 'C' : 6.85 - 12, 'N' : -4.0, 'O' : -3.40, 'Ne' : -4.00, 
         'S' : -5.35, 'Ar' : -5.80, 'Fe' : -7.4, 'Cl' : -7.00}

# <codecell>

# Defining the object that will manage the input file for Cloudy
c_input = pc.CloudyInput(full_model_name)

# <codecell>

# Filling the object with the parameters
# Defining the ionizing SED: Effective temperature and luminosity.
# The lumi_unit is one of the Cloudy options, like "luminosity solar", "q(H)", "ionization parameter", etc... 
c_input.set_BB(Teff = Teff, lumi_unit = 'q(H)', lumi_value = qH)

# <codecell>

# Defining the density. You may also use set_dlaw(parameters) if you have a density law defined in dense_fabden.cpp.
c_input.set_cste_density(dens)

# <codecell>

# Defining the inner radius. A second parameter would be the outer radius (matter-bounded nebula).
#c_input.set_radius(r_in=np.log10(r_min),r_out=np.log10(r_max))
c_input.set_radius(r_in=np.log10(r_min))
c_input.set_abund(ab_dict = abund, nograins = True)
c_input.set_other(options)
c_input.set_iterate() # (0) for no iteration, () for one iteration, (N) for N iterations.
c_input.set_sphere() # () or (True) : sphere, or (False): open geometry.
c_input.set_emis_tab(emis_tab) # better use read_emis_file(file) for long list of lines, where file is an external file.
c_input.set_distance(dist=dist, unit='kpc', linear=True) # unit can be 'kpc', 'Mpc', 'parsecs', 'cm'. If linear=False, the distance is in log.

# <codecell>

# Writing the Cloudy inputs. to_file for writing to a file (named by full_model_name). verbose to print on the screen.
c_input.print_input(to_file = True, verbose = False)

# <codecell>

# Printing some message to the screen
pc.log_.message('Running {0}'.format(model_name), calling = 'test1')

# <codecell>

# Running Cloudy with a timer. Here we reset it to 0.
pc.log_.timer('Starting Cloudy', quiet = True, calling = 'test1')
c_input.run_cloudy()
pc.log_.timer('Cloudy ended after seconds:', calling = 'test1')

# <codecell>

# Reading the Cloudy outputs in the Mod CloudyModel object
Mod = pc.CloudyModel(full_model_name)

# <codecell>

plt.figure(figsize=(fsize,fsize))
plt.plot(Mod.radius, Mod.get_ionic('H', 1), label = 'HII')
plt.plot(Mod.radius, Mod.get_ionic('H', 0), label = 'HI')
plt.plot(Mod.radius, Mod.get_ionic('He', 0), label = 'HeI')
plt.plot(Mod.radius, Mod.get_ionic('He', 1), label = 'HeII')
plt.plot(Mod.radius, Mod.get_ionic('He', 2), label = 'HeIII')
plt.xlabel('Radius',fontsize=18)
plt.ylabel(r'$x_{ion}$',fontsize=18)
plt.title('Ionization Zones')
plt.legend(loc=3)
plt.savefig(fig_dir + "IonizationZones.png")
# <codecell>

plt.figure(figsize=(fsize,fsize))
plt.plot(Mod.radius, Mod.te, label = 'Te')
plt.xlabel('Radius',fontsize=18)
plt.ylabel(r'Electron Temperature ($T_e$)',fontsize=18)
plt.legend(loc=3)
plt.savefig(fig_dir + "ElectronTemperature.png")
# <codecell>

# printing line intensities
for line in Mod.emis_labels:
    print('{0} {1:10.3e} {2:7.2f}'.format(line, Mod.get_emis_vol(line), Mod.get_emis_vol(line) / Mod.get_emis_vol('H__1__4861A') * 100.))

# <codecell>

plt.figure(figsize=(fsize,fsize))
plt.plot(Mod.radius, Mod.get_emis('H__1__6563A'), label = r'H$\alpha$')
plt.plot(Mod.radius, Mod.get_emis('H__1__4861A'), label = r'H$\beta$')
plt.plot(Mod.radius, Mod.get_emis('O__3__5007A'), label = '[OIII]')
plt.plot(Mod.radius, Mod.get_emis('N__2__6584A'), label = '[NII]')
plt.plot(Mod.radius, Mod.get_emis('S_II__6716A'), label = '[SII]')
plt.xlabel('Radius',fontsize=18)
plt.ylabel(r'Emissivity',fontsize=18)

plt.legend()
plt.savefig(fig_dir + "Emissivity.png")
# <codecell>

plt.figure(figsize=(fsize,fsize))
plt.scatter(np.log10(Mod.ne),Mod.te,  c = Mod.depth/np.max(Mod.depth), edgecolors = 'none')
plt.colorbar()
plt.xlabel(r'log N$_e$ [cm$^{-3}$]',fontsize=18)
plt.ylabel('T$_e$ [K]',fontsize=18)
plt.savefig(fig_dir + "Te_Ne.png")
# <codecell>

plt.figure(figsize=(fsize,fsize))
plt.scatter(np.log10(Mod.ne),( Mod.get_emis('S_II__6716A')/Mod.get_emis('S_II__6731A')), c = Mod.radius/np.max(Mod.radius), edgecolors = 'none',label=r'$\frac{SII6716\AA}{SII6731\AA}$')
plt.colorbar()
plt.xlabel(r'log n$_e$',fontsize=18)
plt.ylabel('Ratio',fontsize=18)
plt.title('Density Diagnostic',fontsize=18)
plt.legend()
plt.savefig(fig_dir + "DensityDiagnostic")
# <codecell>

plt.figure(figsize=(fsize,fsize))
plt.scatter(np.log10( Mod.get_emis('N__2__6584A')/Mod.get_emis('H__1__4861A')),np.log10(Mod.get_emis('O__3__5007A')/Mod.get_emis('H__1__6563A')), c = Mod.radius/np.max(Mod.radius), edgecolors = 'none',label='Full region')
plt.xlim((-1.8, 0.8))
plt.ylim((-1.2, 1.2))
plt.colorbar()
plt.title(r'BPT Diagram',fontsize=18)
plt.xlabel('log NII/Halpha',fontsize=18)
plt.ylabel('log OIII/Hbeta',fontsize=18)
plt.legend()
plt.savefig(fig_dir + "BPTDiagram.png")
# <codecell>

plt.figure(figsize=(fsize,fsize))
plt.loglog(Mod.get_cont_x(unit='Ang'), Mod.get_cont_y(cont = 'incid', unit = 'Jy'), label = 'Incident')
plt.loglog(Mod.get_cont_x(unit='Ang'), Mod.get_cont_y(cont = 'diffout', unit = 'Jy'), label = 'Diff Out')
plt.loglog(Mod.get_cont_x(unit='Ang'), Mod.get_cont_y(cont = 'ntrans', unit = 'Jy'), label = 'Net Trans')
plt.xlim((100, 10000))
plt.ylim((1e-3, 1e5))
plt.xlabel('Angstrom')
plt.ylabel('Jy')
plt.legend(loc=4)
plt.savefig(fig_dir + "Jy.png")


O__3__5007A = Mod.get_emis_vol('O__3__5007A')
TOTL__4363A = Mod.get_emis_vol('TOTL__4363A')
ratio = (O__3__5007A / TOTL__4363A)**(-1)

print "Temperature diagnostic "
print "%5.4e %5.4e %5.4e %5.4e" % (O__3__5007A, TOTL__4363A, ratio, np.average(Mod.te))

